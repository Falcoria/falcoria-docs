{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What is Falcoria","text":"<p>Falcoria is a distributed scanning and coordination platform built for penetration testers and red teams. It automates host discovery, port scanning, and result consolidation across multiple systems \u2014 enabling structured, repeatable reconnaissance workflows at scale.</p>"},{"location":"#why-falcoria","title":"Why Falcoria","text":"<p>Traditional recon workflows rely on scattered tools, manual scripting, and inconsistent outputs. Falcoria centralizes scanning, state tracking, and result management into a single, queryable system \u2014 eliminating data duplication and untracked effort.</p>"},{"location":"#who-its-for","title":"Who It's For","text":"<p>Falcoria is built for: - Penetration testers managing complex scopes - Red teams running distributed recon - Security engineers automating scan workflows across environments</p>"},{"location":"#what-falcoria-provides","title":"What Falcoria Provides","text":"<p>Speeds up infrastructure scans by splitting tasks across distributed workers. Scans complete in minutes or hours \u2014 not days \u2014 with no false positives or missing data.</p> <p>Automates scan data management \u2014 merging reports, removing duplicates, and keeping results centrally organized and searchable. No more manual cleanup, scattered files, or repeat scans just to find what you\u2019ve already discovered.</p> <p>Delivers real-time access to scan results for every team member \u2014 with native support for JSON, XML, and API integrations. No waiting for reports, no manual exports, no compatibility issues between tools or teammates.</p> <p>Scales with your needs \u2014 start with a one-liner, or dive deep using config files and CLI options. Share scan presets across teams for consistency, or fine-tune settings per project for precise control.</p>"},{"location":"#get-started","title":"Get Started","text":"<ul> <li>Quick Start Guide</li> <li>Installation Guide</li> <li>Use Cases</li> <li>Import Modes</li> <li>Architecture Overview</li> </ul>"},{"location":"architecture/","title":"Architecture Overview","text":"<p>Falcoria is a modular scanning system built for automation and scale. It coordinates multiple machines to scan large environments faster \u2014 while keeping results accurate, organized, and easy to access.</p>"},{"location":"architecture/#core-components","title":"Core Components","text":"<ul> <li> <p>CLI (<code>falcli</code>)   Command-line interface for launching scans, importing data, and retrieving results via API.</p> </li> <li> <p>Tasker (API)   Orchestrates scan requests. It validates input, deduplicates targets, associates scans with projects, and queues tasks for execution.</p> </li> <li> <p>Worker   Executes scan tasks using Nmap. Designed for parallel execution and horizontal scaling.</p> </li> <li> <p>ScanLedger (API)   Backend API for storing and retrieving scan results. Also supports importing external scan data and accessing metadata.</p> </li> <li> <p>Redis   Tracks scan state during execution and enforces deduplication during task creation.</p> </li> <li> <p>RabbitMQ   Message broker that distributes scan tasks from Tasker to Worker nodes.</p> </li> </ul>"},{"location":"architecture/#system-diagram","title":"System Diagram","text":"<pre><code>+--------+       +---------------+        +------------+        +-----------+\n| falcli | \u2500\u2500\u2500\u2500\u25ba |  Tasker (API) | \u2500\u2500\u2500\u2500\u2500\u25ba | RabbitMQ   | \u2500\u2500\u2500\u2500\u2500\u25ba |  Worker   |\n+--------+       +---------------+        +------------+        +-----------+\n      \u25b2                                                                |\n      \u2502                                                                |\n      \u2502                                                                \u25bc\n      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba+-------------------+\n                                                           | ScanLedger (API)  |\n                                                           +-------------------+\n</code></pre>"},{"location":"architecture/#scan-workflow","title":"Scan Workflow","text":"<ol> <li>The user runs <code>falcli</code> with a list of targets and optional scan configuration.</li> <li><code>falcli</code> sends the request to Tasker via API.</li> <li>Tasker validates the request, links it to a project, applies deduplication, and prepares scan tasks.</li> <li>Tasks are pushed to RabbitMQ.</li> <li>Workers receive tasks and execute scans using Nmap.</li> <li>Scan results are sent to ScanLedger.</li> <li>Results can be retrieved via <code>falcli</code>.</li> </ol>"},{"location":"architecture/#scalability","title":"Scalability","text":"<ul> <li>Workers can be added or removed dynamically.</li> <li>Each Worker supports parallel execution.</li> <li>The architecture has no fixed upper limit on Worker count.</li> </ul>"},{"location":"architecture/#extensibility","title":"Extensibility","text":"<p>Falcoria is built for modularity and scan chaining. Planned or supported extensions include:</p> <ul> <li>Tool chaining (e.g., Nmap \u2192 Nuclei)</li> <li>Conditional workflows and multi-stage task logic</li> <li>Reusable scan templates with structured logic</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>Falcoria is built as a modular system. Each component serves a specific role, and you only need to install what fits your use case.</p> <p>At this stage, two public modules are available:</p>"},{"location":"installation/#scanledger","title":"ScanLedger","text":"<p>ScanLedger is the backend responsible for storing, organizing, and querying scan results. It does not execute scans \u2014 but gives you full access to reports, project data, and import functionality.</p> <p>\u2192 ScanLedger Installation Guide</p>"},{"location":"installation/#falcli-cli-client","title":"falcli (CLI Client)","text":"<p><code>falcli</code> is the command-line interface to manage projects, import data, and interact with ScanLedger. Use it to test workflows, automate project setup, or simulate scans manually.</p> <p>\u2192 CLI Installation Guide</p> <p>\u26a0\ufe0f Other modules such as <code>Tasker</code> and <code>Worker</code> (used for actual scanning and distribution) are not yet publicly released.</p>"},{"location":"quick-start/","title":"Quick Start","text":"<p>This guide provides two streamlined ways to get started with Falcoria: a high-level automatic workflow using <code>fast-scan</code>, and a more manual, step-by-step process for full control.</p> <p>\u2699\ufe0f This guide uses <code>falcli</code> \u2014 Falcoria's command-line interface. Make sure it\u2019s installed and connected to a running backend before proceeding.</p>"},{"location":"quick-start/#option-1-fast-path-with-fast-scan","title":"Option 1: Fast Path with <code>fast-scan</code>","text":"<p>Use this when you want to scan quickly with minimal setup.</p> <pre><code>falcli fast-scan --config scan_configs/default.yaml --hosts example.com,scanme.nmap.org\n</code></pre> <p>The command above will:</p> <ul> <li>Create a new project with a random name</li> <li>Send a scan request to Tasker</li> <li>Track progress until completion</li> <li>Show scanned IPs and port summary</li> <li>Save report locally (XML by default)</li> </ul> <p>You can also pass <code>--delete</code> if you want to remove the project after report download.</p> <p>Example config files can be found in the <code>scan_configs</code> folder or created manually.</p>"},{"location":"quick-start/#option-2-manual-step-by-step-control","title":"Option 2: Manual Step-by-Step Control","text":"<p>Use this when you want explicit control over project creation, task sending, and data download.</p>"},{"location":"quick-start/#1-create-project","title":"1. Create Project","text":"<pre><code>falcli project create --name internal-net\n</code></pre>"},{"location":"quick-start/#2-start-scan","title":"2. Start Scan","text":"<pre><code>falcli project scan start --config scan_configs/custom.yaml --hosts example.com,scanme.nmap.org\n</code></pre>"},{"location":"quick-start/#3-check-scan-status","title":"3. Check Scan Status","text":"<pre><code>falcli project scan status\n</code></pre>"},{"location":"quick-start/#4-get-scanned-ips","title":"4. Get Scanned IPs","text":"<pre><code>falcli project ips list\n</code></pre>"},{"location":"quick-start/#5-download-report","title":"5. Download Report","text":"<pre><code>falcli project ips download\n</code></pre> <p>This manual workflow gives you full control over scope, mode, configuration, and report handling.</p>"},{"location":"use-cases/","title":"Falcoria Use Cases","text":"<p>Falcoria supports a wide range of real-world workflows through two primary categories:</p> <ul> <li>Scan Strategies \u2013 how scans are executed</li> <li>Report Handling \u2013 how scan results are imported, enriched, or merged</li> </ul> <p>This document outlines the most essential use cases for the MVP release.</p>"},{"location":"use-cases/#1-scan-strategies","title":"1. Scan Strategies","text":""},{"location":"use-cases/#port-sharding-across-workers","title":"Port Sharding Across Workers","text":"<p>Distribute port ranges across multiple workers to parallelize scans and reduce detection by IDS/IPS.</p> <pre><code>falcli fast-scan --config ports_0-10000.yaml --hosts targets.txt\nfalcli fast-scan --config ports_10001-65535.yaml --hosts targets.txt\n</code></pre> <p>Import Mode: <code>append</code></p> <p>\u26a0\ufe0f To ensure optimal task distribution, launch the scans one by one with short delays between commands. This gives workers time to claim tasks without conflicts.</p>"},{"location":"use-cases/#fast-scan-only-no-service-detection","title":"Fast Scan Only (No Service Detection)","text":"<p>Run a lightweight scan to detect open ports quickly, skipping service detection entirely.</p> <p>Why This Matters:</p> <ul> <li>Speeds up scanning time, especially for large scopes</li> <li>Minimizes noise to avoid detection by firewalls, IDS, and honeypots</li> <li>Allows chaining with external tools for post-processing</li> </ul> <pre><code>falcli fast-scan --config fast_ports.yaml --hosts targets.txt\n</code></pre>"},{"location":"use-cases/#service-detection-behavior-default-and-optional","title":"Service Detection Behavior (Default and Optional)","text":"<p>By default, Falcoria first discovers open ports and then performs service detection for those ports.</p> <ul> <li>You can disable service detection in the configuration file to run only the discovery phase.</li> <li>Falcoria saves open ports found during the first phase.</li> <li>If some ports are later closed (e.g., by firewall rules) during service detection, they will still be retained in the project.</li> </ul>"},{"location":"use-cases/#offline-project-imports","title":"Offline Project Imports","text":"<p>Useful for air-gapped or internal environments where scan results are collected manually.</p> <p>Why This Matters:</p> <ul> <li>Supports internal pentests or red team ops without internet access</li> <li>Integrates legacy tool output (e.g., Nmap XML)</li> <li>Still benefits from Falcoria\u2019s deduplication and import logic</li> </ul> <pre><code>falcli project ips import --file scan.xml --mode insert\n</code></pre>"},{"location":"use-cases/#2-report-handling","title":"2. Report Handling","text":""},{"location":"use-cases/#enrich-partial-results","title":"Enrich Partial Results","text":"<p>First import open ports only, then later import banners or services to update only changed fields.</p> <pre><code>falcli project ips import --file service_scan.xml --mode update\n</code></pre> <p>Import Mode: <code>update</code></p>"},{"location":"use-cases/#replace-changed-hosts","title":"Replace Changed Hosts","text":"<p>If a rescan reveals different open ports, fully replace the corresponding host\u2019s data.</p> <p>Why This Matters:</p> <ul> <li>During long engagements, the network state may change frequently</li> <li>Ensures the scan data stays fresh and relevant</li> <li>Eliminates outdated results without manual cleanup</li> </ul> <pre><code>falcli project ips import --file latest_scan.xml --mode replace\n</code></pre> <p>Import Mode: <code>replace</code></p>"},{"location":"use-cases/#initial-import-and-deduplication","title":"Initial Import and Deduplication","text":"<p>Safely load scan results into a project. Whether importing manually or via workers, the backend ensures that no duplicate IP-port pairs are stored. This avoids redundancy when multiple team members scan the same targets.</p> <p>Why This Matters:</p> <ul> <li>Reduces storage overhead</li> <li>Ensures clean project history</li> <li>Prevents conflicts in collaborative workflows</li> </ul> <pre><code>falcli fast-scan --hosts team1.txt --mode insert\nfalcli project ips import --file external_team_scan.xml --mode insert\n</code></pre> <p>Import Mode: <code>insert</code> or <code>update</code></p> <p>These core use cases define the MVP-level capabilities of Falcoria. They ensure efficient scanning, parallel execution, clean data management, and reliable collaboration.</p>"},{"location":"import-modes/","title":"Import Modes in Falcoria","text":"<p>Import modes are the heart of Falcoria\u2019s scan management system \u2014 giving you full control over how scan data is ingested, updated, and preserved. They apply equally to automated scan results (e.g. scans) and to manual imports (e.g. from Nmap XML reports). They ensure consistency, eliminate duplicates, and support workflows like incremental enrichment or authoritative replacement.</p>"},{"location":"import-modes/#quick-access","title":"Quick Access","text":"<ul> <li><code>insert</code> Mode \u2013 Example</li> <li><code>replace</code> Mode \u2013 Example</li> <li><code>append</code> Mode</li> <li><code>update</code> Mode</li> </ul>"},{"location":"import-modes/#summary-table","title":"Summary Table","text":"Mode What it Does Primary Use Case <code>insert</code> Adds new IPs only; skips if they exist Importing multiple partial scans safely without risk of duplication <code>replace</code> Deletes and replaces all matching IPs and ports Overwriting outdated scan results with fresh authoritative data <code>append</code> Adds new ports to existing IPs; does not update existing ones Combining distributed or parallel scans into one dataset <code>update</code> Updates only matching ports; preserves everything else Enriching scan data incrementally (e.g. banners, versions)"},{"location":"import-modes/#when-to-use-each-mode","title":"When to Use Each Mode","text":"<p>Each import mode exists to support a specific type of workflow. Here\u2019s how to decide:</p> <ul> <li> <p>Insert \u2192 \u201cI don\u2019t want to mess up what\u2019s there; just add new stuff.\u201d   Useful when importing scan chunks safely without affecting existing results.</p> </li> <li> <p>Replace \u2192 \u201cI want to start over for this host.\u201d   Clears out stale or incorrect data and replaces it completely.</p> </li> <li> <p>Append \u2192 \u201cThis is more data for the same host \u2014 don\u2019t touch what\u2019s already known.\u201d   Designed for phased scanning or port sharding across teams or tools.</p> </li> <li> <p>Update \u2192 \u201cLet\u2019s improve the quality of the scan details, not the structure.\u201d   Keeps the structure intact but adds more detail where available.</p> </li> </ul> <p>Note: All import modes will add new IP addresses that don\u2019t already exist in the project \u2014 this behavior is consistent across <code>insert</code>, <code>replace</code>, <code>append</code>, and <code>update</code>.</p> <p>Use these modes to control how data enters Falcoria and to design scanning workflows that match your infrastructure and goals.</p>"},{"location":"import-modes/append/","title":"<code>append</code> Mode","text":"<p>The <code>append</code> mode lets you add new ports to existing IPs without touching or modifying existing data. It\u2019s designed for parallel scans, port sharding, and multi-phase collection \u2014 where multiple scan outputs need to be combined into one project.</p> <p>This mode avoids any destructive behavior and is ideal when you want to gather more data over time.</p>"},{"location":"import-modes/append/#when-to-use-append","title":"\u2705 When to Use <code>append</code>","text":"<p>Use this mode when:</p> <ul> <li>You're combining partial results from multiple scan agents</li> <li>You're scanning different port ranges in separate phases</li> <li>You're running parallel workers to cover large IP scopes faster</li> <li>You're layering additional scan data (e.g. slow services or UDP) without disturbing existing results</li> </ul>"},{"location":"import-modes/append/#behavior-summary","title":"\ud83e\udde0 Behavior Summary","text":"<ul> <li>If an IP does not exist in the project \u2192 it will be added</li> <li>If an IP exists \u2192 new ports will be added, but existing ports stay unchanged</li> <li>Fields like <code>banner</code>, <code>service</code>, and metadata remain untouched for existing ports</li> </ul>"},{"location":"import-modes/append/#safe-by-design","title":"\ud83d\udee1 Safe by Design","text":"<p>No existing data is modified or removed. <code>append</code> is fully additive \u2014 making it the best choice for distributed scan merging.</p>"},{"location":"import-modes/append/#example","title":"\ud83d\udca1 Example","text":"<pre><code>python3 falcli.py project ips import --file report_append1.xml --mode append\n</code></pre> <p>Output:</p> <pre><code>Imported IPs report into project 'example-project-id'. Result: 1 IP.\n</code></pre> <p>After importing <code>report_append2.xml</code>, new ports will appear \u2014 without altering previously added ones.</p>"},{"location":"import-modes/append/#try-it-yourself","title":"\ud83d\udd17 Try It Yourself","text":"<ul> <li>Step-by-Step Example on GitHub</li> </ul>"},{"location":"import-modes/insert/","title":"<code>insert</code> Mode","text":"<p>The <code>insert</code> mode is the safest way to import scan results into a Falcoria project. It adds new IPs and their data only if they do not already exist \u2014 and skips duplicates silently.</p> <p>This makes it ideal for importing results from passive scans, segmented scopes, or slow asset discovery \u2014 where you don\u2019t want to accidentally overwrite or duplicate anything already collected.</p>"},{"location":"import-modes/insert/#when-to-use-insert","title":"\u2705 When to Use <code>insert</code>","text":"<p>Use this mode when:</p> <ul> <li>You're importing scan data from multiple small or partial scans</li> <li>You want to avoid modifying any existing project data</li> <li>You\u2019re loading results from distributed scanning agents or external sources</li> <li>You\u2019re transferring scans from an isolated or offline network environment where direct integration isn\u2019t possible</li> </ul>"},{"location":"import-modes/insert/#behavior-summary","title":"\ud83e\udde0 Behavior Summary","text":"<ul> <li>If an IP does not exist in the project \u2192 it will be added</li> <li>If an IP already exists \u2192 it will be skipped without error</li> <li>Ports are only added for new IPs; existing IPs and their ports remain untouched</li> </ul>"},{"location":"import-modes/insert/#example","title":"\ud83d\udca1 Example","text":"<pre><code>python3 falcli.py project ips import --file report_insert1.xml --mode insert\n</code></pre> <p>Output:</p> <pre><code>Imported IPs report into project 'example-project-id'. Result: 2 IPs.\n</code></pre> <p>If you run it again with the same file, it will detect duplicates and skip them:</p> <pre><code>No new IPs added in project \n</code></pre>"},{"location":"import-modes/insert/#try-it-yourself","title":"\ud83d\udd17 Try It Yourself","text":"<ul> <li>Step-by-Step Example on GitHub</li> </ul>"},{"location":"import-modes/replace/","title":"<code>replace</code> Mode","text":"<p>The <code>replace</code> mode is a destructive import mode \u2014 it fully removes and replaces existing data for matching IPs. If an IP already exists in the project, it will be wiped clean (including all ports and metadata) and replaced with the data from the new report.</p> <p>Use this mode when you want to overwrite outdated or incorrect scan results with fresh, authoritative data.</p>"},{"location":"import-modes/replace/#when-to-use-replace","title":"\u2705 When to Use <code>replace</code>","text":"<p>Use this mode when:</p> <ul> <li>You're resyncing results from a more complete or trusted scan</li> <li>You need to clean up bad or partial scan data</li> <li>You\u2019re running a re-scan and want to discard old port states</li> <li>You\u2019re enforcing source-of-truth data from a central scan server</li> </ul>"},{"location":"import-modes/replace/#behavior-summary","title":"\ud83e\udde0 Behavior Summary","text":"<ul> <li>If an IP does not exist in the project \u2192 it will be added normally</li> <li>If an IP already exists \u2192 its entire record will be deleted and replaced</li> <li>Port and metadata fields are wiped and re-imported in full</li> </ul>"},{"location":"import-modes/replace/#warning","title":"\u26a0\ufe0f Warning","text":"<p><code>replace</code> is not reversible. Once imported, previous data is lost unless you have a backup. Use with care, especially in collaborative environments.</p>"},{"location":"import-modes/replace/#example","title":"\ud83d\udca1 Example","text":"<pre><code>python3 falcli.py project ips import --file report_replace1.xml --mode replace\n</code></pre> <p>Output:</p> <pre><code>Imported IPs report into project 'example-project-id'. Result: 1 IP.\n</code></pre>"},{"location":"import-modes/replace/#try-it-yourself","title":"\ud83d\udd17 Try It Yourself","text":"<ul> <li>Step-by-Step Example on GitHub</li> </ul>"},{"location":"import-modes/update/","title":"<code>update</code> Mode","text":"<p>The <code>update</code> mode allows you to enrich or refine existing scan data without overwriting the entire IP record. It performs a smart field-level merge \u2014 updating only the values that are explicitly present in the new report.</p> <p>This is perfect for progressive scanning, banner grabbing, or incrementally improving service detection.</p>"},{"location":"import-modes/update/#when-to-use-update","title":"\u2705 When to Use <code>update</code>","text":"<p>Use this mode when:</p> <ul> <li>You're enriching data with additional scan phases (e.g. version detection)</li> <li>You're merging passive and active results for the same IPs</li> <li>You're updating banners, services, or OS details from more specialized tools</li> <li>You want to preserve existing port data while refining metadata</li> </ul>"},{"location":"import-modes/update/#behavior-summary","title":"\ud83e\udde0 Behavior Summary","text":"<ul> <li>If an IP does not exist in the project \u2192 it will be added</li> <li>If an IP exists \u2192 its ports stay intact; only fields explicitly present in the import are updated</li> <li>Fields that are missing in the import report will not erase or overwrite existing data</li> </ul>"},{"location":"import-modes/update/#smart-merge-logic","title":"\ud83e\udde0 Smart Merge Logic","text":"<p>Unlike <code>replace</code>, which wipes everything, <code>update</code> is non-destructive and selective. It\u2019s ideal for long-term scan enrichment, especially when combining different tools or scan passes.</p>"},{"location":"import-modes/update/#example","title":"\ud83d\udca1 Example","text":"<pre><code>python3 falcli.py project ips import --file report_update1.xml --mode update\n</code></pre> <p>Output:</p> <pre><code>Imported IPs report into project 'example-project-id'. Result: 1 IP.\n</code></pre> <p>Existing port data will remain, but service names or banners may be updated.</p>"},{"location":"import-modes/update/#try-it-yourself","title":"\ud83d\udd17 Try It Yourself","text":"<ul> <li>Step-by-Step Example on GitHub</li> </ul>"},{"location":"installation/falcli/","title":"Falcoria CLI \u2013 Installation Guide","text":"<p>Falcoria CLI (<code>falcli</code>) is the command-line interface for configuring and managing distributed scans through the Falcoria platform. This guide covers installation and setup of the CLI tool only.</p> <p>Note: The CLI requires a running Falcoria backend (ScanLedger, Tasker, Redis, RabbitMQ). This guide does not include backend deployment steps.</p>"},{"location":"installation/falcli/#requirements","title":"Requirements","text":"<ul> <li>Python 3.8 or higher</li> <li>Git</li> <li>Linux or macOS (Windows is supported via WSL or Python virtualenv)</li> </ul>"},{"location":"installation/falcli/#installation-steps","title":"Installation Steps","text":"<pre><code># Clone the repository\ngit clone https://github.com/Falcoria/falcli.git\ncd falcli\n\n# Create and activate a virtual environment\npython3 -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n\n# Install dependencies\npip install -r requirements.txt\n\n# Verify installation\npython3 falcli.py\n</code></pre>"},{"location":"installation/falcli/#cli-overview","title":"CLI Overview","text":"<pre><code>Usage: falcli.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --version, -v             Show the version and exit.\n  --install-completion      Install shell completion.\n  --show-completion         Show shell completion info.\n  --help                    Show this message and exit.\n\nCommands:\n  fast-scan   Start a quick scan, track it, and download report\n  project     Manage projects and IP data.\n  config      Configure CLI settings and backend URLs.\n  memory      View or clear stored memory state.\n  scan        Start, stop, or preview scans.\n  workers     Manage worker nodes and their IPs.\n</code></pre>"},{"location":"installation/scanledger/","title":"ScanLedger \u2013 Installation Guide","text":"<p>ScanLedger is the backend API and data store powering Falcoria's scan ingestion and querying engine.</p> <p>You can install it using one of the following methods:</p> <ul> <li>Virtual Environment (Development Setup)</li> <li>Docker (Using Public Image)</li> <li>Docker (Local Build)</li> <li>Docker Compose (Recommended for Self-Hosting)</li> </ul>"},{"location":"installation/scanledger/#installation-methods","title":"Installation Methods","text":""},{"location":"installation/scanledger/#1-virtual-environment-development-setup","title":"1. Virtual Environment (Development Setup)","text":"<p>Use this method for development or debugging:</p> <pre><code>git clone https://github.com/Falcoria/scanledger.git\ncd scanledger\n\npython3 -m venv venv\nsource venv/bin/activate\n\npip install --upgrade pip\npip install -r requirements.txt\n\ncp .env.example .env\nnano .env  # Configure DB and tokens\n\nuvicorn app.main:app --host 0.0.0.0 --port 8000\n</code></pre> <p>API will be available at <code>https://localhost:8000/docs</code>.</p>"},{"location":"installation/scanledger/#2-docker-using-public-image","title":"2. Docker (Using Public Image)","text":"<p>Generate TLS certificates (optional for HTTPS):</p> <pre><code>./generate-tls-bundle.sh\n</code></pre> <p>Run the container:</p> <pre><code>docker run -d \\\n  --name scanledger \\\n  -p 443:443 \\\n  -e POSTGRES_USER=postgres \\\n  -e POSTGRES_PASSWORD=changeme \\\n  -e POSTGRES_DB=falcoriadb \\\n  -e POSTGRES_HOST=localhost \\\n  -e ENVIRONMENT=development \\\n  -e ADMIN_TOKEN=changeme \\\n  -e TASKER_TOKEN=changeme \\\n  -v $(pwd)/unit/bundle.pem:/docker-entrypoint.d/bundle.pem:ro \\\n  ghcr.io/falcoria/scanledger:latest\n</code></pre>"},{"location":"installation/scanledger/#3-docker-local-build","title":"3. Docker (Local Build)","text":"<pre><code>git clone https://github.com/Falcoria/scanledger.git\ncd scanledger\n\n./generate-tls-bundle.sh\n\ndocker build -t scanledger .\n\ndocker run -d \\\n  --name scanledger \\\n  -p 443:443 \\\n  -e POSTGRES_USER=postgres \\\n  -e POSTGRES_PASSWORD=changeme \\\n  -e POSTGRES_DB=falcoriadb \\\n  -e POSTGRES_HOST=localhost \\\n  -e ENVIRONMENT=development \\\n  -e ADMIN_TOKEN=changeme \\\n  -e TASKER_TOKEN=changeme \\\n  -v $(pwd)/unit/bundle.pem:/docker-entrypoint.d/bundle.pem:ro \\\n  scanledger\n</code></pre>"},{"location":"installation/scanledger/#4-docker-compose-recommended-for-self-hosting","title":"4. Docker Compose (Recommended for Self-Hosting)","text":"<pre><code>git clone https://github.com/Falcoria/scanledger.git\ncd scanledger\ncp .env.example .env  # Edit the variables below\n\ndocker compose up --build\n</code></pre> <p>Access: https://localhost:443</p>"},{"location":"installation/scanledger/#config-reference","title":"Config Reference","text":"Variable Description <code>POSTGRES_USER</code> Postgres login name <code>POSTGRES_PASSWORD</code> Postgres password <code>POSTGRES_DB</code> Name of the database used by ScanLedger <code>POSTGRES_HOST</code> Network host/IP of your Postgres instance <code>ENVIRONMENT</code> App mode (e.g. <code>development</code>, affects error verbosity) <code>ADMIN_TOKEN</code> Token used to create the default admin user (used for authorization in API calls) <code>TASKER_TOKEN</code> Token used by the Tasker module (not critical in self-hosted setups)"},{"location":"installation/scanledger/#api-example","title":"API Example","text":"<p>Create a project via curl:</p> <pre><code>curl -X POST https://localhost:443/projects \\\n  -H \"Authorization: Bearer &lt;YOUR_ADMIN_TOKEN&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"project_name\": \"example-project\", \"comment\": \"Initial test\"}' \\\n  --insecure\n</code></pre> <p>Or using <code>falcli</code>:</p> <pre><code>python3 falcli.py project create example-project\n</code></pre>"},{"location":"installation/scanledger/#license","title":"License","text":"<p>MIT License \u2013 See <code>LICENSE.md</code> for full terms.</p>"},{"location":"use-cases/","title":"Falcoria Use Cases","text":"<p>Falcoria supports structured workflows for scanning, importing, filtering, and managing scan results. This section documents common usage patterns and provides real-world CLI sequences for each.</p> <p>Each use case reflects actual red team and recon workflows \u2014 from fast scans to controlled project management.</p>"},{"location":"use-cases/#cli-patterns","title":"CLI Patterns","text":"<p>These commands form the base of interaction:</p> <ul> <li><code>create</code> \u2014 create new projects or scan jobs</li> <li><code>list</code> \u2014 list projects, IPs, ports, or results</li> <li><code>get</code> \u2014 retrieve detailed data per asset or scan</li> <li><code>delete</code> \u2014 remove data cleanly from the system</li> <li><code>help</code> \u2014 introspect available commands and options</li> </ul>"},{"location":"use-cases/#scan-behavior-note","title":"Scan Behavior Note","text":"<p>By default, Falcoria performs open port detection first, and then automatically runs service scan only on ports that are confirmed open.</p> <ul> <li>You can disable service scanning entirely if you only want to detect open ports.</li> <li>You cannot currently run only service scans on pre-specified ports without first performing port discovery.</li> </ul> <p>This approach optimizes performance and minimizes noise while preserving accurate state information for import and merge operations.</p>"},{"location":"use-cases/#scan-configs-reference","title":"Scan Configs Reference","text":"<p>Falcoria uses YAML-based configuration files to control scan behavior.</p> <ul> <li>Use predefined configs from <code>scan_configs/</code></li> <li>See full option list in <code>all_options.yaml</code></li> <li>Short configs like <code>light.yaml</code> or <code>web.yaml</code> are available for quick targeting</li> <li>Configs can be shared, versioned, or chained across scan phases</li> </ul>"},{"location":"use-cases/#use-cases-covered","title":"Use Cases Covered","text":"<ul> <li> <p>Common Operations   Typical create/list/get/delete commands for working with projects, IPs, and ports.</p> </li> <li> <p>Import External Reports   Add Nmap XML results to your project scope \u2014 no workers needed.</p> </li> <li> <p>Rescan   Trigger new scans on previously discovered IPs or ports.</p> </li> <li> <p>Update Enrichment   Enrich or reclassify services with newer metadata (e.g., updated banners).</p> </li> <li> <p>Port Sharding (Evasion)   Use parallelized port scan ranges to bypass WAFs and reduce detection.</p> </li> </ul>"},{"location":"use-cases/common-operations/","title":"Common CLI Operations","text":"<p>This section demonstrates a standard workflow with Falcoria CLI \u2014 from project creation to scanning and result retrieval. Each command includes a brief description to make the process intuitive.</p> <p>All operations are performed in the currently selected project. Results, scan statuses, and IP listings are scoped to this project by default.</p> <p>To switch the current project:</p> <pre><code>python3 falcli.py memory list\n</code></pre> <p>Displays all saved projects and the last used project.</p> <pre><code>python3 falcli.py memory set-default &lt;project_id&gt;\n</code></pre> <p>Switches the active project used for all further commands.</p>"},{"location":"use-cases/common-operations/#1-create-a-project","title":"1. Create a Project","text":"<pre><code>python3 falcli.py project create pentest_example\n</code></pre> <p>Creates a new project for the scan. If a project is already in memory, you\u2019ll be asked whether to replace it.</p>"},{"location":"use-cases/common-operations/#2-view-active-project","title":"2. View Active Project","text":"<pre><code>python3 falcli.py project get\n</code></pre> <p>Displays details of the currently selected project.</p>"},{"location":"use-cases/common-operations/#3-start-a-scan","title":"3. Start a Scan","text":"<pre><code>python3 falcli.py scan start --config scan_configs/default.yaml --targets-file ../hosts.txt\n</code></pre> <p>Launches a scan using a specific configuration and a list of target hosts. <code>--config</code> is optional. By default, <code>default.yaml.</code> will be used. You can use other config files like <code>web.yaml</code>, <code>udp.yaml</code> to perform specified scans.</p>"},{"location":"use-cases/common-operations/#4-check-scan-status","title":"4. Check Scan Status","text":"<pre><code>python3 falcli.py scan status -i\n</code></pre> <p>Shows real-time scan status with a progress bar.</p>"},{"location":"use-cases/common-operations/#5-list-all-projects","title":"5. List All Projects","text":"<pre><code>python3 falcli.py project list\n</code></pre> <p>Displays all available projects with their names, IDs, and users.</p>"},{"location":"use-cases/common-operations/#6-get-project-by-id","title":"6. Get Project by ID","text":"<pre><code>python3 falcli.py project get &lt;project_id&gt;\n</code></pre> <p>Retrieves project metadata by its UUID.</p>"},{"location":"use-cases/common-operations/#7-list-scanned-ips","title":"7. List Scanned IPs","text":"<pre><code>python3 falcli.py project ips list\n</code></pre> <p>Displays all scanned IPs and how many ports were found for each.</p>"},{"location":"use-cases/common-operations/#8-view-detailed-ip-results","title":"8. View Detailed IP Results","text":"<pre><code>python3 falcli.py project ips get\n</code></pre> <p>Shows host status and service information for each scanned IP.</p>"},{"location":"use-cases/common-operations/#9-download-scan-results","title":"9. Download Scan Results","text":"<pre><code>python3 falcli.py project ips download\n</code></pre> <p>Downloads the scan report for the current project as an XML file.</p>"},{"location":"use-cases/common-operations/#10-delete-all-ips-from-project","title":"10. Delete All IPs from Project","text":"<pre><code>python3 falcli.py project ips delete\n</code></pre> <p>Removes all IPs from the selected project.</p>"},{"location":"use-cases/common-operations/#11-delete-project-and-all-its-data","title":"11. Delete project and all its data","text":"<pre><code>python3 falcli.py project delete &lt;project_uuid&gt;\n</code></pre> <p>These operations represent the basic usage pattern of Falcoria CLI \u2014 define project \u2192 scan targets \u2192 track progress \u2192 inspect or delete results.</p>"},{"location":"use-cases/import-external-reports/","title":"Import External Reports","text":"<p>Falcoria supports importing external scan results into your project scope using Nmap XML files. This allows you to use Falcoria as a centralized data store \u2014 even if you don't use workers or automated scanning.</p> <p>This is handled by the ScanLedger component and does not require Falcoria's distributed scanning features. You can use it in offline mode, fully locally, or on a server \u2014 no RabbitMQ, Redis, or workers are needed.</p>"},{"location":"use-cases/import-external-reports/#use-case-centralized-import-system","title":"Use Case: Centralized Import System","text":"<p>Whether you're importing reports from your personal scans or consolidating results from teammates, ScanLedger can act as a public-facing, standalone report registry.</p> <p>ScanLedger Reference: https://github.com/your-org/scanledger</p>"},{"location":"use-cases/import-external-reports/#how-it-works","title":"How It Works","text":"<p>You can run:</p> <pre><code>falcli project ips import --file &lt;report.xml&gt; [--project-id &lt;id&gt;] [--mode &lt;insert|replace|update|append&gt;]\n</code></pre> <ul> <li><code>--file</code> (required): Path to your Nmap XML report.</li> <li><code>--project-id</code> (optional): Defaults to the last used project.</li> <li><code>--mode</code> (optional): Defaults to <code>insert</code>.</li> </ul> <p>If the project is not found in memory, Falcoria will attempt to fetch it from the server and cache it locally.</p>"},{"location":"use-cases/import-external-reports/#import-modes-summary","title":"Import Modes Summary","text":"<p>A brief overview is shown below. For detailed behavior, see Import Modes.</p> Mode Description insert Adds new IPs and ports. Skips anything already present. replace Clears all existing IPs and ports before adding new data. Destructive. update Updates data for already-known IPs and ports. append Adds only new ports to known IPs. Skips existing ones."},{"location":"use-cases/import-external-reports/#common-scenarios","title":"Common Scenarios","text":""},{"location":"use-cases/import-external-reports/#insert-a-fresh-scan","title":"Insert a fresh scan","text":"<pre><code>falcli project ips import --file nmap_report.xml --mode insert\n</code></pre> <p>Use this if your scan contains new IPs or ports that aren\u2019t in the project yet.</p>"},{"location":"use-cases/import-external-reports/#replace-everything-with-new-results","title":"Replace everything with new results","text":"<pre><code>falcli project ips import --file nmap_report.xml --mode replace\n</code></pre> <p>Use with caution. All existing IPs and ports in the project will be deleted before import.</p>"},{"location":"use-cases/import-external-reports/#update-scan-results-for-known-ips","title":"Update scan results for known IPs","text":"<pre><code>falcli project ips import --file nmap_report.xml --mode update\n</code></pre> <p>This will refresh services or states (e.g., port 80 changing from closed to open).</p>"},{"location":"use-cases/import-external-reports/#when-to-use-this","title":"When to Use This","text":"<ul> <li>You scanned something manually and want to bring the results into Falcoria.</li> <li>You're working in a restricted environment without workers or queueing.</li> <li>You\u2019re collaborating and someone shared a scan report.</li> <li>You want to use Falcoria as a structured storage layer for IPs and ports.</li> </ul>"},{"location":"use-cases/port-sharding/","title":"Evasion: Port Sharding","text":"<p>Port sharding is a technique used to evade detection systems and increase scan throughput by splitting the full port range across multiple scan tasks.</p> <p>This is especially effective when the scanning platform distributes tasks to different workers \u2014 each scanning a distinct range of ports.</p>"},{"location":"use-cases/port-sharding/#sharding-setup","title":"Sharding Setup","text":"<p>Two config files are used to implement sharding:</p> <ul> <li><code>port_shard_1.yaml</code> \u2014 contains ports from 1 to 10,000</li> <li><code>port_shard_2.yaml</code> \u2014 contains ports from 10,001 to 65,535</li> </ul> <p>Example usage:</p> <pre><code>falcli scan start --config scan_configs/port_sharding_1.yaml\nfalcli scan start --config scan_configs/port_sharding_2.yaml\n</code></pre> <p>Run both commands in quick succession to distribute scanning load across different workers.</p>"},{"location":"use-cases/port-sharding/#notes","title":"Notes","text":"<ul> <li>These configs use append mode to preserve existing data.</li> <li>Avoid using <code>replace</code> mode unless you intend to fully wipe and reimport.</li> <li>Be careful with <code>min_rate</code> \u2014 overly high values (like 10,000) can flood networks or trigger defenses.</li> <li>This tactic is best suited for red team or stealth scanning scenarios.</li> </ul>"},{"location":"use-cases/rescan/","title":"Full Rescan","text":"<p>This use case demonstrates how to perform a complete rescan of the current project using replace mode.</p> <p>Replace mode wipes all existing IPs and ports in the project and imports only the results from the new scan. This is useful when you want to fully refresh the scan results with updated data.</p>"},{"location":"use-cases/rescan/#configuration-file","title":"Configuration File","text":"<p>Use the following configuration file to run a full scan:</p> <pre><code>open_ports_opts:\n  skip_host_discovery: true\n  dns_resolution: false\n  transport_protocol: tcp\n  max_retries: 3\n  min_rate: 1000\n  ports:\n    - \"1-65000\"\n\nservice_opts:\n  aggressive_scan: true\n  default_scripts: true\n  os_detection: true\n  traceroute: false\n\ntimeout: 1800\nmode: replace\ninclude_services: true\n</code></pre>"},{"location":"use-cases/rescan/#how-to-use","title":"How to Use","text":"<p>Run the scan with:</p> <pre><code>falcli scan start --config scan_configs/rescan.yaml --from-config\n</code></pre>"},{"location":"use-cases/rescan/#notes","title":"Notes","text":"<p>This use case assumes that the current project already has some previously scanned data, such as APIs and port banners. Only in such cases will replace mode be used as intended \u2014 to cleanly override the existing data with new results.</p> <p>\u26a0\ufe0f Be careful when using <code>replace</code> mode. It deletes all data for the project, including IPs. If an IP that previously had ports now returns no results, the old data will be completely overwritten by an empty set.</p> <p>Use this mode only when you're sure you want a full reset of your scan results.</p>"},{"location":"use-cases/update-enrichment/","title":"Update Enrichment","text":"<p>Use this mode when you want to enrich existing scan results with new data, such as additional ports, updated banners, or service info. The <code>update</code> mode does not delete existing data \u2014 it only adds or refreshes what\u2019s newly discovered.</p>"},{"location":"use-cases/update-enrichment/#command-example","title":"Command Example","text":"<pre><code>falcli scan start --config scan_configs/update_enrichment.yaml --targets-file targets.txt\n</code></pre>"},{"location":"use-cases/update-enrichment/#behavior","title":"Behavior","text":"<ul> <li>Keeps existing IPs and ports.</li> <li>Updates services, banners, and metadata if improved information is discovered.</li> <li>Adds new open ports that weren\u2019t previously present.</li> <li>Does not remove or overwrite existing data unless newer values are found.</li> </ul>"},{"location":"use-cases/update-enrichment/#use-case","title":"Use Case","text":"<p>You\u2019ve already scanned an infrastructure and now want to:</p> <ul> <li>Improve service detection with more aggressive settings</li> <li>Refresh outdated banner info</li> <li>Update open port set with additional targets or new exposure</li> </ul> <p>This is a safe mode to run multiple times without losing data.</p>"}]}